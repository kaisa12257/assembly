1.7.2
1)
public class Binary16ToInt {
    public static int binary16ToInt(String bin) {
        return Integer.parseInt(bin, 2);
    }

    public static void main(String[] args) {
        String bin = "1010101010101010";
        System.out.println(binary16ToInt(bin)); 
    }
}
2)
public class Hex32ToInt {
    public static int hex32ToInt(String hex) {
        return (int) Long.parseLong(hex, 16);
    }

    public static void main(String[] args) {
        String hex = "1A2B3C4D";
        System.out.println(hex32ToInt(hex)); 
    }
}

3)
public class IntToBinary {
    public static String intToBinary(int n) {
        return Integer.toBinaryString(n);
    }

    public static void main(String[] args) {
        int n = 12345;
        System.out.println(intToBinary(n)); 
    }
}

4)
public class IntToHex {
    public static String intToHex(int n) {
        return Integer.toHexString(n).toUpperCase();
    }

    public static void main(String[] args) {
        int n = 12345;
        System.out.println(intToHex(n)); 
    }
}

5)
public class AddBase {
    public static String addBase(String a, String b, int base) {
        StringBuilder result = new StringBuilder();
        int carry = 0;
        int i = a.length() - 1;
        int j = b.length() - 1;

        while (i >= 0 || j >= 0 || carry != 0) {
            int digitA = i >= 0 ? Character.digit(a.charAt(i), base) : 0;
            int digitB = j >= 0 ? Character.digit(b.charAt(j), base) : 0;
            int sum = digitA + digitB + carry;
            carry = sum / base;
            result.append(sum % base);
            i--; j--;
        }
        return result.reverse().toString();
    }

    public static void main(String[] args) {
        String a = "1234";
        String b = "4321";
        int base = 10;
        System.out.println(addBase(a, b, base)); // 출력: 5555
    }
}

6)
public class AddHex {
    public static String addBase(String a, String b, int base) {
        StringBuilder result = new StringBuilder();
        int carry = 0;
        int i = a.length() - 1;
        int j = b.length() - 1;

        while (i >= 0 || j >= 0 || carry != 0) {
            int digitA = i >= 0 ? Character.digit(a.charAt(i), base) : 0;
            int digitB = j >= 0 ? Character.digit(b.charAt(j), base) : 0;
            int sum = digitA + digitB + carry;
            carry = sum / base;
            result.append(Integer.toHexString(sum % base).toUpperCase());
            i--; j--;
        }
        return result.reverse().toString();
    }

    public static void main(String[] args) {
        String hex1 = "1A3F";
        String hex2 = "2B7D";
        System.out.println(addBase(hex1, hex2, 16)); // 출력: 45BC
    }
}

7)
public class MultiplyHexDigit {
    public static String multiplyHexDigit(String hexStr, char hexDigit) {
        int multiplier = Character.digit(hexDigit, 16);
        StringBuilder result = new StringBuilder();
        int carry = 0;

        for (int i = hexStr.length() - 1; i >= 0; i--) {
            int digit = Character.digit(hexStr.charAt(i), 16);
            int product = digit * multiplier + carry;
            carry = product / 16;
            result.append(Integer.toHexString(product % 16).toUpperCase());
        }
        if (carry > 0) result.append(Integer.toHexString(carry).toUpperCase());
        return result.reverse().toString();
    }

    public static void main(String[] args) {
        String hexStr = "1A3F";
        char hexDigit = 'B'; // 11
        System.out.println(multiplyHexDigit(hexStr, hexDigit)); 
    }
}

8)
public class CalcTest {
    public static void main(String[] args) {
        int Y = 5;                 // Y 값 대입
        int X = (Y + 4) * 3;       // 계산
        System.out.println("X = " + X); 
       }
}
9)
public class UnsignedBinarySubtraction {

    // 8-bit unsigned subtraction
    public static String subtract(String a, String b) {
        int numA = Integer.parseInt(a, 2);
        int numB = Integer.parseInt(b, 2);
        int result = numA - numB; // unsigned subtraction (큰 수 - 작은 수)
        String binResult = Integer.toBinaryString(result);
        // 8-bit 맞춤
        while (binResult.length() < 8) binResult = "0" + binResult;
        return binResult;
    }

    public static void main(String[] args) {

        String a1 = "10001000";
        String b1 = "00000101";
        System.out.println(subtract(a1, b1)); // 출력: 10000011


        String a2 = "11110000";
        String b2 = "00110011";
        System.out.println(subtract(a2, b2)); // 출력: 11001101
        String a3 = "01010101";
        String b3 = "00001111";
        System.out.println(subtract(a3, b3)); // 출력: 01000110
    }
}

